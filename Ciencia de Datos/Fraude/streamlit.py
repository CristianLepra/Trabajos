# -*- coding: utf-8 -*-
"""streamlit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ojZfd0v73eTzbUEOJqYeM0y2rT6v4IE7
"""

!pip install streamlit pyngrok

pip install streamlit scikit-learn

!ngrok authtoken 2hWIY4iZSWhgKmWcuZmOzH4cYhH_5TeGfraNjy3qdswLLjoy7

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# 
# import streamlit as st
# import pickle
# import numpy as np
# from sklearn.ensemble import GradientBoostingClassifier
# import os
# 
# # Cambia la ruta si es necesario
# model_path = '/content/gradient_boosting_model.pkl'
# 
# # Verifica la existencia del archivo
# if not os.path.isfile(model_path):
#     st.error('El archivo gradient_boosting_model.pkl no se encontró en el directorio especificado.')
# else:
#     # Cargar el modelo
#     with open(model_path, 'rb') as file:
#         model = pickle.load(file)
# 
#     # Función para predecir si una transacción es fraudulenta o no
#     def predict_fraud(features):
#         # Convierte las características a un array numpy
#         features = np.array(features).reshape(1, -1)
#         # Predice usando el modelo
#         prediction = model.predict(features)
#         # Retorna la predicción
#         return prediction[0]
# 
#     # Título de la aplicación
#     st.title('Detección de Fraude en Transacciones')
# 
#     # Descripción
#     st.write("""
#     Esta aplicación predice si una transacción es fraudulenta o no usando un modelo de Gradient Boosting.
#     """)
# 
#     # Campos de entrada para las características
#     # Asegúrate de ajustar estos campos según las características de tu modelo
#     input_features = []
#     feature_names = ['feature1', 'feature2', 'feature3']  # reemplaza con los nombres de las características
# 
#     for feature in feature_names:
#         value = st.number_input(f'Introduce el valor para {feature}:', min_value=0.0, max_value=1000000.0, value=0.0)
#         input_features.append(value)
# 
#     # Botón de predicción
#     if st.button('Predecir'):
#         result = predict_fraud(input_features)
#         if result == 1:
#             st.error('La transacción es fraudulenta.')
#         else:
#             st.success('La transacción no es fraudulenta.')

from pyngrok import ngrok

# Inicia el túnel de ngrok en el puerto 8501
public_url = ngrok.connect(8501)
print(f'Public URL: {public_url}')

# Ejecuta la aplicación Streamlit
!streamlit run app.py

!ngrok authtoken 2hWIY4iZSWhgKmWcuZmOzH4cYhH_5TeGfraNjy3qdswLLjoy7